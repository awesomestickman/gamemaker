<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>



tutWheel=instance_create(352,448,ob_tutWheel);
tutGear=instance_create(544,672,ob_tutGear);
if (global.tutgun=true){
tutGun=instance_create(800,500,ob_tutGun);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((keyboard_check_pressed(vk_down))==true){


}
if ((keyboard_check_pressed(vk_up))==true){


tutGear.y-=30;


}
if ((keyboard_check_released(vk_up))==true){

tutGear.y+=30;

}

if ((keyboard_check_pressed(vk_enter))==true){

global.progression=0;
scr_progress();






}








//wheel
if ((keyboard_check_direct(vk_left))==true){

tutWheel.image_angle+=10;


}
if ((keyboard_check_direct(vk_right))==true){

tutWheel.image_angle-=10;


}
if(global.tutgun=true){
if ((keyboard_check_pressed(ord('Z')))==true){

tutGun.image_angle+=10;


}
if ((keyboard_check_released(ord('Z')))==true){

tutGun.image_angle-=10;


}
if ((keyboard_check_pressed(ord('X')))==true){

tutGun.image_angle-=10;


}
if ((keyboard_check_released(ord('X')))==true){

tutGun.image_angle+=10;


}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_font(f_tut);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_color(c_black);
draw_text(500,100,"Once you're comfortable with the controls")
draw_text(500,150,"press enter.")
draw_text(500,240,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
draw_text(500,260,"THIS LIST TO BE DELETED LATER IN PRODUCTION")
draw_text(500,280,"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
draw_text(500,300,"to shoot hold z or x until your gun is ready")
draw_text(500,320,"then use left or right to aim")
draw_text(500,340,"and release or tap to fire")
draw_text(500,360,"use down to handbrake")
draw_text(500,380,"and finally use space to duck, but no vision")







</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
