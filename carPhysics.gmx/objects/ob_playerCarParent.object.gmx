<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ob_allCarParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
player=true;

///gun spam timer
gunTimer=0;



//start engines!
engineSound=audio_play_sound(snd_engine,10,true);
threshholdx+=2;
threshholdy+=2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///basic looping
event_inherited();
//ENGINE SOUND WOOOO
//engineSound=audio_play_sound(snd_engine,10,false);
if(engine==true){
audio_sound_pitch(engineSound, (engineUse/engineMax)+sqr(phy_speed)/sqr(speedLimit));
}
else{

audio_stop_sound(engineSound);
}
if(phy_speed&lt;7){
maxTurn=30;
}
if(phy_speed&lt;2){
maxTurn=20;
}
//gunspam so if you spam shoot you can
if(gunTimer&lt;40){
gunTimer++;

}

//checking if too off nowhere
if(phy_position_x&lt;-500||phy_position_x&gt;2200||phy_position_y&gt;2000){
dead=true;
control=false;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////movement
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pressing keys
//create variables for both sides
cweapon=false;
anglemax=0;
anglemin=0;

////////////////////////////////////////////////ZZZZZZZZZZZZZZZZZZZZZZ
if(keyboard_check_pressed(ord('Z'))==true){
    
//////////////////////////////WINDOW GUN
if(weaponType=="window"){
if(xweapon==true){

with(xgun){
instance_destroy();

}

xweapon=false;

}



if(control==true){

zweapon=true;

zgun= instance_create(
x+(dcos(image_angle+90)*(sprite_height/3))-(dsin(image_angle+90)*(sprite_width/2)),
y-(dsin(image_angle+90)*(sprite_height/3))-(dcos(image_angle+90)*(sprite_width/2))
, ob_gun_window);

zgun.depth=-100;
///gun timer spam
if(gunTimer&lt;15){
zgun.imageTimer=15;

}


//reset rotation
if(ztrueRotation&lt;10){
ztrueRotation=10;
}
}
}

}
/////////////////////////////////////////XXXXXXXXXXXXXXXXXXXXXX
else if(keyboard_check_pressed(ord('X'))==true){

//////////////////////////////WINDOW GUN
if(weaponType=="window"){
    if(zweapon==true){

        with(zgun){
        instance_destroy();

        }

    zweapon=false;

    }



    if(control==true){

    xweapon=true;

    xgun= instance_create(
    x+(dcos(image_angle+90)*(sprite_height/3))+(dsin(image_angle+90)*(sprite_width/2)),
    y-(dsin(image_angle+90)*(sprite_height/3))+(dcos(image_angle+90)*(sprite_width/2))
    , ob_gun_window);

    xgun.depth=-100;
    if(gunTimer&lt;15){
xgun.imageTimer=15;

}
    //reset rotation
        if(xtrueRotation&gt;-60){
        xtrueRotation=-60;
        }
    }
}

}
if(keyboard_check_pressed(ord('z'))==true||keyboard_check_pressed(ord('x'))==true){





}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///releasing keys



/////////////////////ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
if(keyboard_check_released(ord('Z'))==true){
//////////////////////////////WINDOW GUN
if(weaponType=="window"){
if(zweapon==true){
    if(zgun.ready==true){
        //bam
        audio_play_sound(snd_shoot,9,false);
    
    
        //create bullet
        bullet= instance_create(x+(dcos(image_angle+90)*(sprite_height/3))-(dsin(image_angle+90)*(sprite_width/2)),
        y-(dsin(image_angle+90)*(sprite_height/3))-(dcos(image_angle+90)*(sprite_width/2))
        , ob_smallBullet);
    
        //add rope so doesnt collide with shooter car
        physics_joint_rope_create(id, bullet, x, y, bullet.x, bullet.y, 9000, false)
    
        //give bullet reference to fire in
        bullet.angle=zgun.image_angle+90;
            with(bullet){
            //boom
            physics_apply_force(x,y,lengthdir_x(200000,angle),lengthdir_y(200000,angle));
            }
        ///////////////GHOST BULLET
    
        //create bullet
        gbullet= instance_create(x+(dcos(image_angle+90)*(sprite_height/3))-(dsin(image_angle+90)*(sprite_width/2)),
        y-(dsin(image_angle+90)*(sprite_height/3))-(dcos(image_angle+90)*(sprite_width/2))
    
        , ob_smallBullet_ghost);
        //add rope so doesnt collide with shooter car
        physics_joint_rope_create(id, gbullet, x, y, gbullet.x, gbullet.y, 9000, false)
    
        //give bullet reference to fire in
        gbullet.angle=zgun.image_angle+90;
            with(gbullet){
            //boom
            physics_apply_force(x,y,lengthdir_x(200000,angle),lengthdir_y(200000,angle));
    
            }
    
        //stutter for kick
        instance_create(x,y,ob_shake);
    
    
    //spammy
    gunTimer=0;
    
        
    }
    with(zgun){
        instance_destroy();
    
        }
    
        zweapon=false;
}
}


}

/////////////////////////////////////////XXXXXXXXXXXXXXXXXXXXXX
if(keyboard_check_released(ord('X'))==true){

//////////////////////////////WINDOW GUN
if(weaponType=="window"){
if(xweapon==true){
    if(xgun.ready==true){
        //bam
        audio_play_sound(snd_shoot,9,false);
        //////REAL BULLET
        //create bullet
        bullet= instance_create(x+(dcos(image_angle+90)*(sprite_height/3))+(dsin(image_angle+90)*(sprite_width/2)),
        y-(dsin(image_angle+90)*(sprite_height/3))+(dcos(image_angle+90)*(sprite_width/2))

        , ob_smallBullet);
        //add rope so doesnt collide with shooter car
        physics_joint_rope_create(id, bullet, x, y, bullet.x, bullet.y, 9000, false);


        //give bullet reference to fire in
        bullet.angle=xgun.image_angle+90;
            with(bullet){
            //boom
            physics_apply_force(x,y,lengthdir_x(200000,angle),lengthdir_y(200000,angle));

            }
        ///////////////GHOST BULLET

        //create bullet
        gbullet= instance_create(x+(dcos(image_angle+90)*(sprite_height/3))+(dsin(image_angle+90)*(sprite_width/2)),
        y-(dsin(image_angle+90)*(sprite_height/3))+(dcos(image_angle+90)*(sprite_width/2))

        , ob_smallBullet_ghost);
        //add rope so doesnt collide with shooter car
        physics_joint_rope_create(id, gbullet, x, y, gbullet.x, gbullet.y, 9000, false)


        //give bullet reference to fire in
        gbullet.angle=xgun.image_angle+90;
            with(gbullet){
            //boom
            physics_apply_force(x,y,lengthdir_x(200000,angle),lengthdir_y(200000,angle));

            }







        //stutter for kick
        instance_create(x,y,ob_shake);
    //spammy
    gunTimer=0;
        
    }
    //clean up
        with(xgun){
        instance_destroy();

        }

    xweapon=false;
}
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(zweapon==true&amp;&amp;control=true){


if(ztrueRotation&gt;10){
ztrueRotation-=5;
}
}
else if(xweapon==true&amp;&amp;control=true){

if(xtrueRotation&gt;-110){
xtrueRotation-=5;
}
}
else if(gunTimer&lt;10){
//prevent drive n spam
}
else{

if(theTire.trueRotation&lt;40&amp;&amp;control=true){
theTire.trueRotation+=10;
//physics_apply_force(x, y-sprite_width/4, tireGrip, 0);
//tire_angle-=turnSpeed;



if(turnGripCounter&lt;10&amp;&amp;phy_speed&gt;speedLimit-1){
phy_angular_damping=angleDampLow;
}
turnGripCounter+=3;
}


turnDirection="right";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
engineUse+=2;
if(control==true){
speedLimit=accelHorsePower;
velocity=targetVelocity+60;
}
//physics_apply_force(x, y-sprite_height/4,(dsin(theTire.image_angle)*velocity)*-2, (dcos(theTire.image_angle)*velocity)*-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(zweapon==true&amp;&amp;control=true){


if(ztrueRotation&lt;150){

ztrueRotation+=5;
}
}
else if(xweapon==true&amp;&amp;control=true){

if(xtrueRotation&lt;-40){
xtrueRotation+=5;
}

}
else if(gunTimer&lt;10){
//prevent drive n spam
}
else{

if(theTire.trueRotation&gt;-40&amp;&amp;control=true){
theTire.trueRotation-=10;
//physics_apply_force(x, y-sprite_width/4, -tireGrip, 0);

//tire_angle+=turnSpeed;



if(turnGripCounter&lt;10&amp;&amp;phy_speed&gt;speedLimit-1){
phy_angular_damping=angleDampLow;
}
turnGripCounter+=3;
}


turnDirection="left";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>11</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,42</point>
    <point>0,42</point>
  </PhysicsShapePoints>
</object>
