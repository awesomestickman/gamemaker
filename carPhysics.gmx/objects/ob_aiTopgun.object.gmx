<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ob_aiTail</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
topweapon=true;

topgun=instance_create(
x,
y
, ob_gun_top);

topgun.depth=-100;

//how often shoots
guntimer=0;
bursttimer=30;
burstcounter=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LIT AI
event_inherited();

if(instance_exists(ob_playerCarParent)){
targety=ob_playerCarParent.y;
targetx=ob_playerCarParent.x;
}
else{
targety=y;
targetx=x;
}




guntimer--;
bursttimer--;
if(burstcounter&gt;3){
bursttimer=190;
burstcounter=0;

}

if(dead==false&amp;&amp;asleep==false){

///shameless copy from the internet. thank you nocturne from nocturne games

var pd = point_direction(x, y, targetx, targety) -90; //Get the direction to point to
var dd = ((((pd - topgun.image_angle) mod 360) + 540) mod 360) - 180; //get the angle difference
topgun.image_angle += min(abs(dd), 1) * sign(dd);  //Turn the turret (set the 10 value to whatever you wish as it will be the maximum turn speed in degrees per step).



if(abs(targetx-x)&lt;300&amp;&amp;abs(targety-y&lt;300)){
if(guntimer&lt;0&amp;&amp;bursttimer&lt;0){
guntimer=10;
burstcounter++;
//bam
        audio_play_sound(snd_shoot,9,false);
    
    
        //create bullet
        bullet= instance_create(x,
        y
        , ob_smallBullet);
    
        //add rope so doesnt collide with shooter car
        physics_joint_rope_create(id, bullet, x, y, bullet.x, bullet.y, 9000, false)
    
        //give bullet reference to fire in
        bullet.angle=topgun.image_angle+90;
            with(bullet){
            //boom
            physics_apply_force(x,y,lengthdir_x(200000,angle),lengthdir_y(200000,angle));
            }
        ///////////////GHOST BULLET
    
        //create bullet
        gbullet= instance_create(x,
        y
    
        , ob_smallBullet_ghost);
        //add rope so doesnt collide with shooter car
        physics_joint_rope_create(id, gbullet, x, y, gbullet.x, gbullet.y, 9000, false)
    
        //give bullet reference to fire in
        gbullet.angle=topgun.image_angle+90;
            with(gbullet){
            //boom
            physics_apply_force(x,y,lengthdir_x(200000,angle),lengthdir_y(200000,angle));
    
            }


            gbullet.parent=id;






}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
